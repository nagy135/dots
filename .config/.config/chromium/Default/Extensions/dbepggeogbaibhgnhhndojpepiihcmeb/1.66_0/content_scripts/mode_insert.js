// Generated by CoffeeScript 1.12.7
(function() {
  var InsertMode, PassNextKeyMode, root,
    extend1 = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  InsertMode = (function(superClass) {
    extend1(InsertMode, superClass);

    function InsertMode(options) {
      var defaults, handleKeyEvent;
      if (options == null) {
        options = {};
      }
      this.permanent = options.permanent;
      this.global = options.global;
      handleKeyEvent = (function(_this) {
        return function(event) {
          var activeElement, ref;
          if (!_this.isActive(event)) {
            return _this.continueBubbling;
          }
          activeElement = _this.getActiveElement();
          if (activeElement === document.body && activeElement.isContentEditable) {
            return _this.passEventToPage;
          }
          if (ref = KeyboardUtils.getKeyCharString(event), indexOf.call(Settings.get("passNextKeyKeys"), ref) >= 0) {
            new PassNextKeyMode;
          } else if (event.type === 'keydown' && KeyboardUtils.isEscape(event)) {
            if (DomUtils.isFocusable(activeElement)) {
              activeElement.blur();
            }
            if (!_this.permanent) {
              _this.exit();
            }
          } else {
            return _this.passEventToPage;
          }
          return _this.suppressEvent;
        };
      })(this);
      defaults = {
        name: "insert",
        indicator: !this.permanent && !Settings.get("hideHud") ? "Insert mode" : void 0,
        keypress: handleKeyEvent,
        keydown: handleKeyEvent
      };
      InsertMode.__super__.constructor.call(this, extend(defaults, options));
      if (this.permanent) {
        InsertMode.permanentInstance = this;
      }
    }

    InsertMode.prototype.isActive = function(event) {
      if (event === InsertMode.suppressedEvent) {
        return false;
      }
      if (this.global) {
        return true;
      }
      return DomUtils.isFocusable(this.getActiveElement());
    };

    InsertMode.prototype.getActiveElement = function() {
      var activeElement, ref;
      activeElement = document.activeElement;
      while (activeElement != null ? (ref = activeElement.shadowRoot) != null ? ref.activeElement : void 0 : void 0) {
        activeElement = activeElement.shadowRoot.activeElement;
      }
      return activeElement;
    };

    InsertMode.suppressedEvent = null;

    InsertMode.suppressEvent = function(event) {
      return this.suppressedEvent = event;
    };

    return InsertMode;

  })(Mode);

  PassNextKeyMode = (function(superClass) {
    extend1(PassNextKeyMode, superClass);

    function PassNextKeyMode(count) {
      var keyDownCount, seenKeyDown;
      if (count == null) {
        count = 1;
      }
      seenKeyDown = false;
      keyDownCount = 0;
      PassNextKeyMode.__super__.constructor.call(this, {
        name: "pass-next-key",
        indicator: "Pass next key.",
        exitOnBlur: window,
        keypress: (function(_this) {
          return function() {
            return _this.passEventToPage;
          };
        })(this),
        keydown: (function(_this) {
          return function() {
            seenKeyDown = true;
            keyDownCount += 1;
            return _this.passEventToPage;
          };
        })(this),
        keyup: (function(_this) {
          return function() {
            if (seenKeyDown) {
              if (!(0 < --keyDownCount)) {
                if (!(0 < --count)) {
                  _this.exit();
                }
              }
            }
            return _this.passEventToPage;
          };
        })(this)
      });
    }

    return PassNextKeyMode;

  })(Mode);

  root = typeof exports !== "undefined" && exports !== null ? exports : (window.root != null ? window.root : window.root = {});

  root.InsertMode = InsertMode;

  root.PassNextKeyMode = PassNextKeyMode;

  if (typeof exports === "undefined" || exports === null) {
    extend(window, root);
  }

}).call(this);
