" ██╗   ██╗██╗███╗   ███╗██████╗  ██████╗
" ██║   ██║██║████╗ ████║██╔══██╗██╔════╝
" ██║   ██║██║██╔████╔██║██████╔╝██║
" ╚██╗ ██╔╝██║██║╚██╔╝██║██╔══██╗██║
"  ╚████╔╝ ██║██║ ╚═╝ ██║██║  ██║╚██████╗
"   ╚═══╝  ╚═╝╚═╝     ╚═╝╚═╝  ╚═╝ ╚═════╝

" Settings {{{
syntax on
filetype indent on
set updatetime=300
set foldmethod=marker
set tabstop=4
set expandtab
set shiftwidth=4
set relativenumber
set sts=4
set ts=4
set autoindent
set termguicolors
set smartindent
set path+=**
" set cursorline
" set cursorcolumn
set wildmenu
set showcmd
set showmatch
set incsearch
set hlsearch
set number
set numberwidth=3
set lazyredraw
set noshowmode
set listchars=tab:▸\ ,eol:¬
set list
if has('nvim')
    set inccommand=split
    set wildoptions=pum
endif
set maxfuncdepth=1000
set undofile
" set undodir=~/.vim/undodir
set conceallevel=0
set splitbelow
set splitright
"}}}

let mapleader = " "

"Mappings {{{
nnoremap H ^
nnoremap L $
nnoremap <C-b> :NERDTreeToggle<CR>
nnoremap ;ft   :NERDTreeFind<CR>
nnoremap ,b    :TagbarToggle<CR>
" nnoremap <c-s> :source ~/.vimrc<CR>
nnoremap <c-s> :w<CR>
nnoremap <c-c> :e ~/.vimrc<CR>
nnoremap <c-n> :call DeleteFunctionUnderCursor()<CR>
nnoremap <c-h> :nohl<CR>
nnoremap <c-k> :HexokinaseToggle<CR>
nnoremap <c-f> :Files<CR>
nnoremap <c-e> :Buffers<CR>
" nnoremap <c-l> :.-1read ~/.vim/snippets/loremipsum<CR>
nnoremap ,html :-1read ~/.vim/snippets/html_template.html<CR>jjjf>a
" nnoremap ,c :-1read ~/.vim/snippets/html_template.html<CR>jjjf>a
map <F8> :call AutoScroll()<CR>
nnoremap <F4> :CtrlPClearAllCaches<CR>
nnoremap <F1> :let @+ = expand("%:p")<CR>
vnoremap // y/\V<C-r>=escape(@",'/\')<CR><CR>
nnoremap ;b :.w !bash<CR>
vnoremap ;b :w !bash<CR>
noremap n nzz
nnoremap N Nzz
nnoremap <F3> :set spell!<CR>
nnoremap <c-p> :GFiles<CR>
nnoremap <c-l> :GFiles?<CR>
" nnoremap <C-m> :Ctrlp<CR>
" nnoremap <C-m> :BLines<CR>
nnoremap <c-g> :Rg<CR>
tnoremap <Esc> <C-\><C-n>
nnoremap <F4> :call ZathuraOpen()<CR>
nnoremap <leader>c :HexokinaseToggle<CR>

nnoremap <leader>j :%!python -m json.tool<CR>
nnoremap <leader>x :wq<CR>
nnoremap <leader>qq :q!<CR>
nnoremap <leader>e :CocCommand explorer<CR>

" Fugitive binds
nnoremap <leader>gs :Git<CR>
nnoremap <leader>gg :Git<CR>
nnoremap <leader>gp :Git push<CR>
nnoremap <leader>gP :Git pull<CR>
nnoremap <leader>gc :Gcommit<CR>
nnoremap <leader>gb :Gblame<CR>

" project search {{{
" FZF
" nnoremap <leader>ff :GFiles<CR>
" nnoremap <leader>fl :GFiles?<CR>
" nnoremap <leader>fg :Rg<CR>
" TELESCOPE
nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fl <cmd>lua require('telescope.builtin').git_status()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>
" }}}

cnoreabbrev W w
cnoreabbrev Q q
cnoreabbrev QA qa
cnoreabbrev Qa qa
cnoreabbrev WA wa
cnoreabbrev Wa wa

inoremap (; (<CR>);<C-c>O
" inoremap (, (<CR>),<C-c>O
inoremap (<CR> (<CR>)<C-c>O
inoremap {; {<CR>};<C-c>O
" inoremap {, {<CR>},<C-c>O
inoremap {<CR> {<CR>}<C-c>O
inoremap [; [<CR>];<C-c>O
" inoremap [, [<CR>],<C-c>O
inoremap [<CR> [<CR>]<C-c>O

"}}}

" AutoCommands {{{
" autocmd CursorHold * silent call CocActionAsync('highlight')

autocmd BufNewFile,BufRead *.wiki set filetype=markdown
autocmd BufNewFile,BufRead *.wiki syn match markdownError "\w\@<=\w\@="

autocmd! FileType fzf tnoremap <buffer> <esc> <c-c>
"MatLab
autocmd FileType matlab nnoremap gcc mlI%<space><esc>`lll
"LaTeX
autocmd FileType tex nnoremap <c-j> :w !pdflatex % &> /dev/null<CR>
"Rust
autocmd FileType rust nnoremap <c-j> :w<CR>:!cargo run<CR>
autocmd FileType rust nnoremap <leader>p oprintln!();<ESC>hi
autocmd FileType rust nnoremap <leader>P Oprintln!();<ESC>hi
autocmd FileType rust nnoremap <leader>pp yiwoprintln!("{}", );<ESC>hPF{Pa <ESC>
autocmd FileType rust nnoremap <leader>PP yiwOprintln!("{}", );<ESC>hPF{Pa <ESC>
autocmd FileType rust nnoremap <leader>r :botright split<CR>:term cargo run<CR>
autocmd FileType rust nnoremap <leader>t :botright split<CR>:term cargo test<CR>

"Python
autocmd FileType python nnoremap <c-j> :w !python<CR>:w<CR>
autocmd FileType python nnoremap <leader>p oprint()<ESC>i
autocmd FileType python nnoremap <leader>P Oprint()<ESC>i
autocmd FileType python nnoremap <leader>pp yiwoprint('', )<ESC>PF'P^
autocmd FileType python nnoremap <leader>PP yiwOprint('', )<ESC>PF'P^
"Go
autocmd FileType go nnoremap <c-j> :w !go build<CR>:w<CR>
autocmd FileType go nnoremap <leader>p ofmt.Println()<ESC>i
autocmd FileType go nnoremap <leader>P Ofmt.Println()<ESC>i
autocmd FileType go nnoremap <leader>pp yiwofmt.Println("", )<ESC>PF"P^
autocmd FileType go nnoremap <leader>PP yiwOfmt.Println("", )<ESC>PF"P^
"Rust
autocmd FileType rust nnoremap <c-j> :w !cargo run<CR>:w<CR>
"SH
autocmd FileType sh nnoremap <c-j> :w !bash<CR>:w<CR>
autocmd FileType sh nnoremap <leader>pp yiwoecho ""<ESC>PA $<ESC>p
autocmd FileType sh nnoremap <leader>PP yiwOecho ""<ESC>PA $<ESC>p
autocmd FileType sh nnoremap <leader>b :.w !bash<CR>
autocmd FileType sh vnoremap <leader>b :w !bash<CR>
autocmd FileType sh nnoremap <leader>p oecho <ESC>a
autocmd FileType sh nnoremap <leader>P Oecho <ESC>a
"C++
autocmd FileType cpp nnoremap <c-j> :make!<CR>
autocmd FileType c nnoremap <c-j> :make!<CR>
autocmd FileType cpp nnoremap <c-l> :!choose_main<CR>
"Perl
autocmd FileType perl nnoremap <c-j> :w !perl<CR>
"PHP
autocmd FileType php nnoremap <leader>p yiwodd('' ,);<ESC>F'Pf,a$<ESC>p
autocmd FileType php nnoremap <leader>P yiwOdd('' ,);<ESC>F'Pf,a$<ESC>p
autocmd FileType php nnoremap <leader>r :! curl $(cat /tmp/nvim_curl 2> /dev/null) -o /tmp/nvim_response &> /dev/null<CR>:botright split<CR>:e /tmp/nvim_response<CR><CR>
autocmd FileType php nnoremap <leader>t :TagbarToggle<CR>
" autocmd FileType php nnoremap <leader>e :botright split<CR>:e /tmp/nvim_curl<CR>

autocmd FileType javascript nmap <leader>p oconsole.log(<ESC>lmiA;<ESC>`ii
autocmd FileType javascript nmap <leader>P Oconsole.log(<ESC>lmiA;<ESC>`ii
autocmd FileType javascript nnoremap <leader>pp yiwoconsole.log("", );<ESC>hPF"P<ESC>
autocmd FileType javascript nnoremap <leader>PP yiwOconsole.log("", );<ESC>hPF"P<ESC>
" autocmd FileType javascript noremap <leader>C O/**<CR>@author Viktor Nagy <viktor.nagy@01people.com><CR>/<Esc>

autocmd FileType typescript set sts=2
autocmd FileType typescript set shiftwidth=2
autocmd FileType typescript set ts=2
" autocmd FileType typescript noremap <leader>C O/**<CR>@author Viktor Nagy <viktor.nagy@01people.com><CR>/<Esc>

nnoremap <leader>C :set paste<CR>"9yy"9PC/**<ESC>"9pC * <ESC>"9pC *<ESC>"9pC * @author Viktor Nagy <viktor.nagy@01people.com><ESC>"9pC */<Esc>:set nopaste<CR>:echo "DocString generated..."<CR>^kkkA

com! FormatXML :%!python3 -c "import xml.dom.minidom, sys; print(xml.dom.minidom.parse(sys.stdin).toprettyxml())"

let g:xml_syntax_folding=1
au FileType xml setlocal foldmethod=syntax

au BufReadPost *.latte set syntax=html
au BufReadPost *.lock set syntax=json

augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END
"}}}

" Color schemes {{{
" colorscheme molokai
" colorscheme luna-term
" colorscheme jellybeans
" colorscheme gruvbox
" }}}

let g:markdown_folding = 0 "doesnt fold on open
syn match markdownError "\w\@<=\w\@=" "ignores error highlighting on underscores

" Plugin setup {{{
if !exists('g:jellybeans_overrides')
    let g:jellybeans_overrides = {
    \    'background': { 'guibg': '123123' },
    \}
endif

let g:wiki_root = '~/wiki'

let g:rustfmt_autosave = 1

let g:indent_guides_enable_on_vim_startup = 1
" let g:molokai_original = 1

" let g:airline_theme='jellybeans'
let g:lightline = {
      \ 'colorscheme': 'one',
      \ }

let g:indentLine_char = '|'

let g:vim_json_syntax_conceal = 0


let g:goyo_width = 131
let g:goyo_height = 102

let g:fzf_action = {
  \ 'ctrl-t': 'tab split',
  \ 'ctrl-s': 'split',
  \ 'ctrl-v': 'vsplit' }
let g:fzf_buffers_jump = 1

autocmd VimEnter * command! -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --fixed-strings --ignore-case --no-ignore --hidden --follow --glob "!.git/*" --glob "!public/*" --glob "!vendor/*" --glob "!node_modules/*" --glob "!storage/*" --glob "!tags" --glob "!_ide_helper*.php" --color "always" '.shellescape(<q-args>), 1, {'options': '--delimiter : --nth 4..'}, <bang>0)

" {{{ fzf floating setup
" Using floating windows of Neovim to start fzf
if has('nvim')
  function! FloatingFZF(width, height, border_highlight)
    function! s:create_float(hl, opts)
      let buf = nvim_create_buf(v:false, v:true)
      let opts = extend({'relative': 'editor', 'style': 'minimal'}, a:opts)
      let win = nvim_open_win(buf, v:true, opts)
      call setwinvar(win, '&winhighlight', 'NormalFloat:'.a:hl)
      call setwinvar(win, '&colorcolumn', '')
      return buf
    endfunction

    " Size and position
    let width = float2nr(&columns * a:width)
    let height = float2nr(&lines * a:height)
    let row = float2nr((&lines - height) / 2)
    let col = float2nr((&columns - width) / 2)

    " Border
    let top = '┌' . repeat('─', width - 2) . '┐'
    let mid = '│' . repeat(' ', width - 2) . '│'
    let bot = '└' . repeat('─', width - 2) . '┘'
    let border = [top] + repeat([mid], height - 2) + [bot]

    " Draw frame
    let s:frame = s:create_float(a:border_highlight, {'row': row, 'col': col, 'width': width, 'height': height})
    call nvim_buf_set_lines(s:frame, 0, -1, v:true, border)

    " Draw viewport
    call s:create_float('Normal', {'row': row + 1, 'col': col + 2, 'width': width - 4, 'height': height - 2})
    autocmd BufWipeout <buffer> execute 'bwipeout' s:frame
  endfunction

  let g:fzf_layout = { 'window': 'call FloatingFZF(0.9, 0.6, "Comment")' }
endif
if has('nvim') && !exists('g:fzf_layout')
  autocmd! FileType fzf
  autocmd  FileType fzf set laststatus=0 noshowmode noruler
    \| autocmd BufLeave <buffer> set laststatus=2 showmode ruler
endif
" }}}

" Opens pdf with zathura
function! ZathuraOpen()
    let path = expand('%:p')
    let arr = split( path, '\.')
    let pdf = arr[0] . '.pdf'
    execute "silent !zathura " . pdf . " &"
endfunc
"}}}

" Functions {{{
" Deletes function call and its brackets when hovered over function name
function! DeleteFunctionUnderCursor()
    let line = getline('.')
    set iskeyword+=.
    normal! diwxml
    set iskeyword-=.
    let i = 1
    let c = 1
    while i <= strlen(line)
        let char = getline('.')[col('.') - 1]
        if (char == '(')
            let c += 1
        elseif (char == ')')
            let c -= 1
        endif
        if (c == 0)
            let most_inner = 1
            let u = col('.')
            let u -= 1
            while (u > 2)
                let char_inner = getline('.')[u-1]
                if (char_inner == ')')
                    let most_inner = 0
                    break
                endif
                if (char_inner == '(')
                    let most_inner = 1
                    break
                endif
                let u -= 1
            endwhile

            if (most_inner == 0)
                normal dT)x`l
            else
                normal x`l
            endif
            break
        endif
        normal! l
        let i += 1
    endwhile
endfunc

function! Check_letter()
    normal! h
    if getline(".")[col(".")-1] == '('
        echom "som dnu"
    endif
endfunc

function! AutoScroll()
    " let l:line_count = str2nr(line('$'))
    " set maxfuncdepth = l:line_count
    call AutoScrollRecurse()
endfunction

function! AutoScrollRecurse()
    normal! j
    redraw
    sleep 600m
    call AutoScrollRecurse()
endfunction

"}}}

" Relative django jumps {{{
let g:last_relative_dir = ''
nnoremap \1 :call RelatedFile ("models.py")<cr>
nnoremap \2 :call RelatedFile ("views.py")<cr>
nnoremap \3 :call RelatedFile ("urls.py")<cr>
nnoremap \4 :call RelatedFile ("admin.py")<cr>
nnoremap \5 :call RelatedFile ("tests.py")<cr>
nnoremap \6 :call RelatedFile ( "templates/" )<cr>
nnoremap \7 :call RelatedFile ( "templatetags/" )<cr>
nnoremap \8 :call RelatedFile ( "management/" )<cr>
nnoremap \0 :e settings.py<cr>
nnoremap \9 :e urls.py<cr>

fun! RelatedFile(file)
    if filereadable(expand("%:h"). '/models.py') || isdirectory(expand("%:h") . "/templatetags/")
        exec "edit %:h/" . a:file
        let g:last_relative_dir = expand("%:h") . '/'
        return ''
    endif
    if g:last_relative_dir != ''
        exec "edit " . g:last_relative_dir . a:file
        return ''
    endif
    echo "Cant determine where relative file is : " . a:file
    return ''
endfun

fun SetAppDir()
    if filereadable(expand("%:h"). '/models.py') || isdirectory(expand("%:h") . "/templatetags/")
        let g:last_relative_dir = expand("%:h") . '/'
        return ''
    endif
endfun
autocmd BufEnter *.py call SetAppDir()
" }}}

" Plug {{{
call plug#begin('~/.vim/plugged')

    " Plug 'dhruvasagar/vim-table-mode'
    Plug 'MaxMEllon/vim-jsx-pretty'
    Plug 'airblade/vim-gitgutter'
    Plug 'morhetz/gruvbox'
    Plug 'mhartington/oceanic-next'
    Plug 'JamshedVesuna/vim-markdown-preview'
    Plug 'noahfrederick/vim-laravel'
    " Plug 'airblade/vim-gitgutter'
    Plug 'rust-lang/rust.vim'
    " Plug 'vimwiki/vimwiki'
    Plug 'lervag/wiki.vim'
    " Plug 'vim-airline/vim-airline'
    " Plug 'nathanaelkane/vim-indent-guides'
    Plug 'Yggdroot/indentLine'
    Plug 'scrooloose/nerdtree'
    " Plug 'ervandew/supertab'
    Plug 'tpope/vim-surround'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-commentary'
    Plug 'tpope/vim-eunuch'
    Plug 'majutsushi/tagbar'
" Plug 'nvim-treesitter/nvim-treesitter'
    " Plug 'raviqqe/vim-nonblank'
    Plug 'tpope/vim-markdown'
    " Plug 'rhysd/rust-doc.vim'
    Plug 'RRethy/vim-hexokinase', { 'do': 'make hexokinase' }
    " Plug 'ap/vim-css-color'
    Plug 'mattn/emmet-vim'
    " Plug 'kien/ctrlp.vim'
    Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
    Plug 'junegunn/fzf.vim'
    Plug 'LandonSchropp/vim-stamp'
    " Plug 'vim-airline/vim-airline-themes'
    Plug 'itchyny/lightline.vim'
    Plug 'mhinz/vim-startify'
    Plug 'jwalton512/vim-blade'
    Plug 'tpope/vim-repeat'
    " Plug 'ycm-core/YouCompleteMe'
    Plug 'junegunn/goyo.vim'

    Plug 'moll/vim-node'
    " Plug 'nvim-treesitter/nvim-treesitter'
    " Plug 'christianchiarulli/nvcode.vim'
    Plug 'nvim-lua/plenary.nvim'
    Plug 'nvim-lua/popup.nvim'
    Plug 'nvim-telescope/telescope.nvim'
    Plug 'nvim-telescope/telescope-fzy-native.nvim'

    " Plug 'jiangmiao/auto-pairs'

    Plug 'kkoomen/vim-doge', { 'do': { -> doge#install() } }
    if has('nvim')
        " Plug 'neovim/nvim-lsp'
        " Plug 'liuchengxu/vim-clap'
        Plug 'neoclide/coc.nvim', {'branch': 'release', 'for': ['python', 'javascript', 'typescript', 'php', 'rust', 'json', 'lisp', 'c']}
        Plug 'neoclide/coc-tsserver'
    endif
call plug#end()
"}}}

" coc {{{
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
"
" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Remap keys for COC gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> <leader>ca <Plug>(coc-codeaction)


" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)
nnoremap <leader>d :CocList diagnostics<CR>

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)
" }}}

colorscheme gruvbox
" colorscheme OceanicNext
" colorscheme nvcode

set omnifunc=syntaxcomplete#Complete

